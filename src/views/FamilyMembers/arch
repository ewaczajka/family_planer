import React, { useContext, useEffect, useState } from 'react'
import { FamilyContext } from 'providers/CurrentFamilyProvider'
import { db } from 'firebase-config'
import {
	collection,
	getDocs,
	addDoc,
	updateDoc,
	deleteDoc,
	onSnapshot,
	doc,
} from 'firebase/firestore'
import { Wrapper } from './FamilyMembers.styles'
import { User } from 'components/molecules/User/User'

export const FamilyMembers = () => {
	const { activeFamily } = useContext(FamilyContext)

	const initialValues = {
		selectedColor: '#ffffff',
		currentUser: { familyID: activeFamily },
	}

	const [users, setUsers] = useState([])
	const usersCollectionRef = collection(db, 'members')
	const [editing, setEditing] = useState(false)
	const [creating, setCreating] = useState(false)
    const [error, setError] = useState('')
	const [selectedColor, setSelectedColor] = useState(
		initialValues.selectedColor
	)
	const [currentUser, setCurrentUser] = useState(initialValues.currentUser)

	useEffect(() => {
		const getUsers = async () => {
			const data = await getDocs(usersCollectionRef)
			setUsers(data.docs.map(doc => ({ ...doc.data(), id: doc.id })))
		}
		onSnapshot(usersCollectionRef, () => {
			getUsers()
		})
	}, [])

	const deleteUser = async id => {
		const userDoc = doc(db, 'members', id)
		await deleteDoc(userDoc)
	}

	const saveUser = async id => {
		if (!currentUser.name) {
			setError('Name is required!')
		} else {
			if (editing) {
				setEditing(false)
				const userDoc = doc(db, 'members', id)
				await updateDoc(userDoc, { ...currentUser })
			} else if (creating) {
				debugger
				setCreating(false)
				await addDoc(usersCollectionRef, currentUser)
			}
			setCurrentUser(initialValues.currentUser)
			setSelectedColor(initialValues.selectedColor)
		}
	}

	const handleUser = (id, name, color) => {
        debugger
		setEditing(id)
        setCurrentUser(prevState => ({ ...prevState, name: name, color: color }))
		setCreating(false)
		setError('')
		setSelectedColor(color)
	}

	const handleNewUser = () => {
		setCreating(true)
		setEditing(false)
		setError('')
		setCurrentUser(initialValues.currentUser)
		setSelectedColor(initialValues.selectedColor)
	}

    // const [logoLetters, setLogoLetters] = useState('')

    // const firstLetters = (name) => {
    //     debugger
    //     const Letters = name.match(/\b(\w)/g)
	// 	setLogoLetters(Letters.join('').toUpperCase())
    // }

	const handleName = e => {
		setCurrentUser(prevState => ({ ...prevState, name: e.target.value }))
		setError('')
      //  firstLetters(e.target.value)
	}

	const handleColor = e => {
		setCurrentUser(prevState => ({ ...prevState, color: e.target.value }))
		setSelectedColor(e.target.value)
	}

    
	return (
		<Wrapper>
			{users.map(user => (
				<User
					key={user.id}
					id={user.id}
					name={user.name}
					color={user.color}
					deleteUser={() => deleteUser(user.id)}
					handleUser={() => handleUser(user.id, user.name, user.color)}
					saveUser={() => saveUser(user.id)}
					handleName={e => handleName(e)}
					handleColor={e => handleColor(e)}
					editing={editing}
					selectedColor={selectedColor}
					error={error}
                    // logoLetters={logoLetters}
				/>
			))}
			{creating ? (
				<User
					handleName={e => handleName(e)}
					handleColor={e => handleColor(e)}
					saveUser={() => saveUser()}
					creating={creating}
					selectedColor={selectedColor}
					error={error}
				/>
			) : null}
			<button onClick={handleNewUser}>Add family member</button>
		</Wrapper>
	)
}
